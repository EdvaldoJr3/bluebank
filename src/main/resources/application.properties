
server.port=80
#server.error.whitelabel.enabled=false

# DataSource settings: set here your own configurations for the database
# connection. In this example we have "netgloo_blog" as database name and 
# "root" as username and password.
spring.datasource.url = jdbc:mysql://localhost:3306/bluebank?useTimezone=true&serverTimezone=UTC
spring.datasource.username = root
spring.datasource.password = teste1234
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# Keep the connection alive if idle for a long time (needed in production)
spring.datasource.testWhileIdle = true
spring.datasource.validationQuery = SELECT 1

# Show or not log for each sql query
spring.jpa.show-sql = true

# Hibernate ddl auto (create, create-drop, update)
spring.jpa.hibernate.ddl-auto = update

# Naming strategy
spring.jpa.hibernate.naming-strategy = org.hibernate.cfg.ImprovedNamingStrategy

# Use spring.jpa.properties.* for Hibernate native properties (the prefix is
# stripped before adding them to the entity manager)

# The SQL dialect makes Hibernate generate better SQL for the chosen database
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect

#Consultas
spring.queries.usuarios=select cpf, senha, status from usuario where cpf=?
spring.queries.roles=select u.cpf, r.role from usuario u inner join usuario_role ur on(u.id=ur.id) inner join role r on(ur.role_id=r.role_id) where u.cpf=?